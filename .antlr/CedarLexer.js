// Generated from CedarLexer.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,46,361,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,
1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,
1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,
1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,
28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,
1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,265,8,36,1,37,1,37,
1,37,5,37,270,8,37,10,37,12,37,273,9,37,1,37,1,37,1,38,1,38,1,38,5,38,280,
8,38,10,38,12,38,283,9,38,1,38,1,38,1,39,1,39,1,39,3,39,290,8,39,1,40,1,
40,1,40,3,40,295,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,43,1,43,
1,44,1,44,1,44,3,44,310,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
3,45,321,8,45,1,46,3,46,324,8,46,1,46,4,46,327,8,46,11,46,12,46,328,1,47,
1,47,5,47,333,8,47,10,47,12,47,336,9,47,1,48,1,48,1,48,1,48,3,48,342,8,48,
1,49,4,49,345,8,49,11,49,12,49,346,1,49,1,49,1,50,1,50,1,50,1,50,5,50,355,
8,50,10,50,12,50,358,9,50,1,50,1,50,0,0,51,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,0,81,0,83,0,85,0,87,0,89,
40,91,41,93,42,95,43,97,44,99,45,101,46,1,0,8,8,0,34,34,47,47,92,92,98,98,
102,102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,3,0,0,31,34,34,92,
92,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,
13,13,32,32,3,0,10,10,13,13,8232,8233,378,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,
51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,
0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,1,103,1,0,0,0,3,106,
1,0,0,0,5,111,1,0,0,0,7,116,1,0,0,0,9,121,1,0,0,0,11,124,1,0,0,0,13,128,
1,0,0,0,15,133,1,0,0,0,17,140,1,0,0,0,19,147,1,0,0,0,21,154,1,0,0,0,23,165,
1,0,0,0,25,175,1,0,0,0,27,182,1,0,0,0,29,192,1,0,0,0,31,201,1,0,0,0,33,209,
1,0,0,0,35,212,1,0,0,0,37,215,1,0,0,0,39,218,1,0,0,0,41,221,1,0,0,0,43,224,
1,0,0,0,45,226,1,0,0,0,47,228,1,0,0,0,49,230,1,0,0,0,51,232,1,0,0,0,53,234,
1,0,0,0,55,236,1,0,0,0,57,238,1,0,0,0,59,240,1,0,0,0,61,242,1,0,0,0,63,244,
1,0,0,0,65,246,1,0,0,0,67,248,1,0,0,0,69,250,1,0,0,0,71,252,1,0,0,0,73,264,
1,0,0,0,75,266,1,0,0,0,77,276,1,0,0,0,79,286,1,0,0,0,81,291,1,0,0,0,83,296,
1,0,0,0,85,302,1,0,0,0,87,304,1,0,0,0,89,309,1,0,0,0,91,320,1,0,0,0,93,323,
1,0,0,0,95,330,1,0,0,0,97,341,1,0,0,0,99,344,1,0,0,0,101,350,1,0,0,0,103,
104,5,105,0,0,104,105,5,102,0,0,105,2,1,0,0,0,106,107,5,116,0,0,107,108,
5,104,0,0,108,109,5,101,0,0,109,110,5,110,0,0,110,4,1,0,0,0,111,112,5,101,
0,0,112,113,5,108,0,0,113,114,5,115,0,0,114,115,5,101,0,0,115,6,1,0,0,0,
116,117,5,108,0,0,117,118,5,105,0,0,118,119,5,107,0,0,119,120,5,101,0,0,
120,8,1,0,0,0,121,122,5,105,0,0,122,123,5,110,0,0,123,10,1,0,0,0,124,125,
5,104,0,0,125,126,5,97,0,0,126,127,5,115,0,0,127,12,1,0,0,0,128,129,5,119,
0,0,129,130,5,104,0,0,130,131,5,101,0,0,131,132,5,110,0,0,132,14,1,0,0,0,
133,134,5,117,0,0,134,135,5,110,0,0,135,136,5,108,0,0,136,137,5,101,0,0,
137,138,5,115,0,0,138,139,5,115,0,0,139,16,1,0,0,0,140,141,5,112,0,0,141,
142,5,101,0,0,142,143,5,114,0,0,143,144,5,109,0,0,144,145,5,105,0,0,145,
146,5,116,0,0,146,18,1,0,0,0,147,148,5,102,0,0,148,149,5,111,0,0,149,150,
5,114,0,0,150,151,5,98,0,0,151,152,5,105,0,0,152,153,5,100,0,0,153,20,1,
0,0,0,154,155,5,63,0,0,155,156,5,112,0,0,156,157,5,114,0,0,157,158,5,105,
0,0,158,159,5,110,0,0,159,160,5,99,0,0,160,161,5,105,0,0,161,162,5,112,0,
0,162,163,5,97,0,0,163,164,5,108,0,0,164,22,1,0,0,0,165,166,5,112,0,0,166,
167,5,114,0,0,167,168,5,105,0,0,168,169,5,110,0,0,169,170,5,99,0,0,170,171,
5,105,0,0,171,172,5,112,0,0,172,173,5,97,0,0,173,174,5,108,0,0,174,24,1,
0,0,0,175,176,5,97,0,0,176,177,5,99,0,0,177,178,5,116,0,0,178,179,5,105,
0,0,179,180,5,111,0,0,180,181,5,110,0,0,181,26,1,0,0,0,182,183,5,63,0,0,
183,184,5,114,0,0,184,185,5,101,0,0,185,186,5,115,0,0,186,187,5,111,0,0,
187,188,5,117,0,0,188,189,5,114,0,0,189,190,5,99,0,0,190,191,5,101,0,0,191,
28,1,0,0,0,192,193,5,114,0,0,193,194,5,101,0,0,194,195,5,115,0,0,195,196,
5,111,0,0,196,197,5,117,0,0,197,198,5,114,0,0,198,199,5,99,0,0,199,200,5,
101,0,0,200,30,1,0,0,0,201,202,5,99,0,0,202,203,5,111,0,0,203,204,5,110,
0,0,204,205,5,116,0,0,205,206,5,101,0,0,206,207,5,120,0,0,207,208,5,116,
0,0,208,32,1,0,0,0,209,210,5,105,0,0,210,211,5,115,0,0,211,34,1,0,0,0,212,
213,5,58,0,0,213,214,5,58,0,0,214,36,1,0,0,0,215,216,5,61,0,0,216,217,5,
61,0,0,217,38,1,0,0,0,218,219,5,124,0,0,219,220,5,124,0,0,220,40,1,0,0,0,
221,222,5,38,0,0,222,223,5,38,0,0,223,42,1,0,0,0,224,225,5,59,0,0,225,44,
1,0,0,0,226,227,5,42,0,0,227,46,1,0,0,0,228,229,5,43,0,0,229,48,1,0,0,0,
230,231,5,45,0,0,231,50,1,0,0,0,232,233,5,33,0,0,233,52,1,0,0,0,234,235,
5,46,0,0,235,54,1,0,0,0,236,237,5,64,0,0,237,56,1,0,0,0,238,239,5,91,0,0,
239,58,1,0,0,0,240,241,5,93,0,0,241,60,1,0,0,0,242,243,5,40,0,0,243,62,1,
0,0,0,244,245,5,41,0,0,245,64,1,0,0,0,246,247,5,123,0,0,247,66,1,0,0,0,248,
249,5,125,0,0,249,68,1,0,0,0,250,251,5,44,0,0,251,70,1,0,0,0,252,253,5,58,
0,0,253,72,1,0,0,0,254,265,5,60,0,0,255,256,5,60,0,0,256,265,5,61,0,0,257,
258,5,62,0,0,258,265,5,61,0,0,259,265,5,62,0,0,260,261,5,33,0,0,261,265,
5,61,0,0,262,265,3,37,18,0,263,265,3,9,4,0,264,254,1,0,0,0,264,255,1,0,0,
0,264,257,1,0,0,0,264,259,1,0,0,0,264,260,1,0,0,0,264,262,1,0,0,0,264,263,
1,0,0,0,265,74,1,0,0,0,266,271,5,34,0,0,267,270,3,79,39,0,268,270,3,87,43,
0,269,267,1,0,0,0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,
1,0,0,0,272,274,1,0,0,0,273,271,1,0,0,0,274,275,5,34,0,0,275,76,1,0,0,0,
276,281,5,34,0,0,277,280,3,81,40,0,278,280,3,87,43,0,279,277,1,0,0,0,279,
278,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,284,1,0,
0,0,283,281,1,0,0,0,284,285,5,34,0,0,285,78,1,0,0,0,286,289,5,92,0,0,287,
290,7,0,0,0,288,290,3,83,41,0,289,287,1,0,0,0,289,288,1,0,0,0,290,80,1,0,
0,0,291,294,5,92,0,0,292,295,7,0,0,0,293,295,3,83,41,0,294,292,1,0,0,0,294,
293,1,0,0,0,295,82,1,0,0,0,296,297,5,117,0,0,297,298,3,85,42,0,298,299,3,
85,42,0,299,300,3,85,42,0,300,301,3,85,42,0,301,84,1,0,0,0,302,303,7,1,0,
0,303,86,1,0,0,0,304,305,8,2,0,0,305,88,1,0,0,0,306,310,3,91,45,0,307,310,
3,93,46,0,308,310,3,75,37,0,309,306,1,0,0,0,309,307,1,0,0,0,309,308,1,0,
0,0,310,90,1,0,0,0,311,312,5,116,0,0,312,313,5,114,0,0,313,314,5,117,0,0,
314,321,5,101,0,0,315,316,5,102,0,0,316,317,5,97,0,0,317,318,5,108,0,0,318,
319,5,115,0,0,319,321,5,101,0,0,320,311,1,0,0,0,320,315,1,0,0,0,321,92,1,
0,0,0,322,324,5,45,0,0,323,322,1,0,0,0,323,324,1,0,0,0,324,326,1,0,0,0,325,
327,7,3,0,0,326,325,1,0,0,0,327,328,1,0,0,0,328,326,1,0,0,0,328,329,1,0,
0,0,329,94,1,0,0,0,330,334,7,4,0,0,331,333,7,5,0,0,332,331,1,0,0,0,333,336,
1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,96,1,0,0,0,336,334,1,0,0,0,337,
342,3,23,11,0,338,342,3,25,12,0,339,342,3,29,14,0,340,342,3,31,15,0,341,
337,1,0,0,0,341,338,1,0,0,0,341,339,1,0,0,0,341,340,1,0,0,0,342,98,1,0,0,
0,343,345,7,6,0,0,344,343,1,0,0,0,345,346,1,0,0,0,346,344,1,0,0,0,346,347,
1,0,0,0,347,348,1,0,0,0,348,349,6,49,0,0,349,100,1,0,0,0,350,351,5,47,0,
0,351,352,5,47,0,0,352,356,1,0,0,0,353,355,8,7,0,0,354,353,1,0,0,0,355,358,
1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,359,1,0,0,0,358,356,1,0,0,0,
359,360,6,50,1,0,360,102,1,0,0,0,16,0,264,269,271,279,281,289,294,309,320,
323,328,334,341,346,356,2,6,0,0,0,1,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CedarLexer extends antlr4.Lexer {

    static grammarFileName = "CedarLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'if'", "'then'", "'else'", "'like'", "'in'", 
                         "'has'", "'when'", "'unless'", "'permit'", "'forbid'", 
                         "'?principal'", "'principal'", "'action'", "'?resource'", 
                         "'resource'", "'context'", "'is'", "'::'", "'=='", 
                         "'||'", "'&&'", "';'", "'*'", "'+'", "'-'", "'!'", 
                         "'.'", "'@'", "'['", "']'", "'('", "')'", "'{'", 
                         "'}'", "','", "':'" ];
	static symbolicNames = [ null, "IF", "THEN", "ELSE", "LIKE", "IN", "HAS", 
                          "WHEN", "UNLESS", "PERMIT", "FORBID", "QPRINCIPAL", 
                          "PRINCIPAL", "ACTION", "QRESOURCE", "RESOURCE", 
                          "CONTEXT", "IS", "NAMESPACE", "DOUBLEEQUAL", "DOUBLEPIPE", 
                          "DOUBLEAMP", "SEMICOLON", "ASTERIX", "PLUS", "MINUS", 
                          "EXCLAMATION", "PERIOD", "ATSYMB", "OPENBRKT", 
                          "CLOSEBRKT", "OPENPAREN", "CLOSEPAREN", "OPENBRACE", 
                          "CLOSEBRACE", "COMMA", "COLON", "RELOP", "STR", 
                          "PAT", "LITERAL", "BOOL", "INT", "IDENT", "VAR", 
                          "WHITESPC", "COMMENT" ];
	static ruleNames = [ "IF", "THEN", "ELSE", "LIKE", "IN", "HAS", "WHEN", 
                      "UNLESS", "PERMIT", "FORBID", "QPRINCIPAL", "PRINCIPAL", 
                      "ACTION", "QRESOURCE", "RESOURCE", "CONTEXT", "IS", 
                      "NAMESPACE", "DOUBLEEQUAL", "DOUBLEPIPE", "DOUBLEAMP", 
                      "SEMICOLON", "ASTERIX", "PLUS", "MINUS", "EXCLAMATION", 
                      "PERIOD", "ATSYMB", "OPENBRKT", "CLOSEBRKT", "OPENPAREN", 
                      "CLOSEPAREN", "OPENBRACE", "CLOSEBRACE", "COMMA", 
                      "COLON", "RELOP", "STR", "PAT", "ESC", "ESCWITHASTERIX", 
                      "UNICODE", "HEX", "SAFECODEPOINT", "LITERAL", "BOOL", 
                      "INT", "IDENT", "VAR", "WHITESPC", "COMMENT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CedarLexer.EOF = antlr4.Token.EOF;
CedarLexer.IF = 1;
CedarLexer.THEN = 2;
CedarLexer.ELSE = 3;
CedarLexer.LIKE = 4;
CedarLexer.IN = 5;
CedarLexer.HAS = 6;
CedarLexer.WHEN = 7;
CedarLexer.UNLESS = 8;
CedarLexer.PERMIT = 9;
CedarLexer.FORBID = 10;
CedarLexer.QPRINCIPAL = 11;
CedarLexer.PRINCIPAL = 12;
CedarLexer.ACTION = 13;
CedarLexer.QRESOURCE = 14;
CedarLexer.RESOURCE = 15;
CedarLexer.CONTEXT = 16;
CedarLexer.IS = 17;
CedarLexer.NAMESPACE = 18;
CedarLexer.DOUBLEEQUAL = 19;
CedarLexer.DOUBLEPIPE = 20;
CedarLexer.DOUBLEAMP = 21;
CedarLexer.SEMICOLON = 22;
CedarLexer.ASTERIX = 23;
CedarLexer.PLUS = 24;
CedarLexer.MINUS = 25;
CedarLexer.EXCLAMATION = 26;
CedarLexer.PERIOD = 27;
CedarLexer.ATSYMB = 28;
CedarLexer.OPENBRKT = 29;
CedarLexer.CLOSEBRKT = 30;
CedarLexer.OPENPAREN = 31;
CedarLexer.CLOSEPAREN = 32;
CedarLexer.OPENBRACE = 33;
CedarLexer.CLOSEBRACE = 34;
CedarLexer.COMMA = 35;
CedarLexer.COLON = 36;
CedarLexer.RELOP = 37;
CedarLexer.STR = 38;
CedarLexer.PAT = 39;
CedarLexer.LITERAL = 40;
CedarLexer.BOOL = 41;
CedarLexer.INT = 42;
CedarLexer.IDENT = 43;
CedarLexer.VAR = 44;
CedarLexer.WHITESPC = 45;
CedarLexer.COMMENT = 46;



